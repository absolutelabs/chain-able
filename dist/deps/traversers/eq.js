var traverse = require('../traverse')
var toS = require('../is/toS')
var isFunction = require('../is/function')
var isRegExp = require('../is/regexp')
var isDate = require('../is/date')
var hasOwnProperty = require('../util/hasOwnProperty')
var ObjectKeys = require('../util/keys')

// function isArguments(x) {
//   return toS(x) === '[object Arguments]'
// }
// function sameKeysLength(x, y) {
//   return Object.keys(x).length === Object.keys(y).length
// }

/* prettier-ignore */
module.exports = function(a, b, loose) {
  var equal = true
  var node = b

  traverse(a).forEach(function(y) {
    var notEqual = function() {
      equal = false
      // this.stop();
      return undefined
    }

    // if (node === undefined || node === null) return notEqual();
    if (!this.isRoot) {
      // if (!Object.hasOwnProperty.call(node, this.key)) return notEqual()
      if (typeof node !== 'object') {
        return notEqual()
      }
      node = node[this.key]
    }

    var x = node

    this.post(function() {
      node = x
    })

    // if (process.env.NODE_ENV !== 'production') {
    //   console.log('types: ', {x: toS(x), y: toS(y)})
    // }

    if (this.circular) {
      // if (process.env.NODE_ENV !== 'production') {
      //   console.log('circular')
      // }
      if (traverse(b).get(this.circular.path) !== x) {
        notEqual()
      }
    }
    else if (typeof x !== typeof y) {
      // if (process.env.NODE_ENV !== 'production') {
      //   console.log('diff types')
      // }
      if (loose === true && x == y) {
        // ignore
      }
      else {
        notEqual()
      }
    }
    else if (x === null || y === null || x === undefined || y === undefined) {
      if (x !== y) {
        notEqual()
      }
    }
    else if (x.__proto__ !== y.__proto__) {
      notEqual()
    }
    else if (x === y) {
      // nop
    }
    else if (isFunction(x)) {
      if (isRegExp(x)) {
        // both regexps on account of the __proto__ check
        if (x.toString() != y.toString()) {
          notEqual()
        }
      }
      else if (x !== y) {
        notEqual()
      }
    }
    else if (typeof x === 'object') {
      if (toS(y) === '[object Arguments]' || toS(x) === '[object Arguments]') {
        if (toS(x) !== toS(y)) {
          notEqual()
        }
      }
      else if (isRegExp(x) || isRegExp(y)) {
        if (!x || !y || x.toString() !== y.toString()) {
          notEqual()
        }
      }
      else if (isDate(x) || isDate(y)) {
        if (
          !(isDate(x)) ||
          !(isDate(y)) ||
          x.getTime() !== y.getTime()
        ) {
          notEqual()
        }
      }
      else {
        var kx = ObjectKeys(x)
        var ky = ObjectKeys(y).length
        if (kx.length !== ky) {
          return notEqual()
        }
        for (var i = 0; i < kx.length; i++) {
          var k = kx[i]
          if (!hasOwnProperty(y, k)) {
            notEqual()
          }
        }
      }
    }
  })

  return equal
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXEuanMiLCJzb3VyY2VzIjpbImVxLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHRyYXZlcnNlID0gcmVxdWlyZSgnLi4vdHJhdmVyc2UnKVxuY29uc3QgdG9TID0gcmVxdWlyZSgnLi4vaXMvdG9TJylcbmNvbnN0IGlzRnVuY3Rpb24gPSByZXF1aXJlKCcuLi9pcy9mdW5jdGlvbicpXG5jb25zdCBpc1JlZ0V4cCA9IHJlcXVpcmUoJy4uL2lzL3JlZ2V4cCcpXG5jb25zdCBpc0RhdGUgPSByZXF1aXJlKCcuLi9pcy9kYXRlJylcbmNvbnN0IGhhc093blByb3BlcnR5ID0gcmVxdWlyZSgnLi4vdXRpbC9oYXNPd25Qcm9wZXJ0eScpXG5jb25zdCBPYmplY3RLZXlzID0gcmVxdWlyZSgnLi4vdXRpbC9rZXlzJylcblxuLy8gZnVuY3Rpb24gaXNBcmd1bWVudHMoeCkge1xuLy8gICByZXR1cm4gdG9TKHgpID09PSAnW29iamVjdCBBcmd1bWVudHNdJ1xuLy8gfVxuLy8gZnVuY3Rpb24gc2FtZUtleXNMZW5ndGgoeCwgeSkge1xuLy8gICByZXR1cm4gT2JqZWN0LmtleXMoeCkubGVuZ3RoID09PSBPYmplY3Qua2V5cyh5KS5sZW5ndGhcbi8vIH1cblxuLyogcHJldHRpZXItaWdub3JlICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGEsIGIsIGxvb3NlKSB7XG4gIHZhciBlcXVhbCA9IHRydWVcbiAgdmFyIG5vZGUgPSBiXG5cbiAgdHJhdmVyc2UoYSkuZm9yRWFjaChmdW5jdGlvbih5KSB7XG4gICAgdmFyIG5vdEVxdWFsID0gZnVuY3Rpb24oKSB7XG4gICAgICBlcXVhbCA9IGZhbHNlXG4gICAgICAvLyB0aGlzLnN0b3AoKTtcbiAgICAgIHJldHVybiB1bmRlZmluZWRcbiAgICB9XG5cbiAgICAvLyBpZiAobm9kZSA9PT0gdW5kZWZpbmVkIHx8IG5vZGUgPT09IG51bGwpIHJldHVybiBub3RFcXVhbCgpO1xuICAgIGlmICghdGhpcy5pc1Jvb3QpIHtcbiAgICAgIC8vIGlmICghT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobm9kZSwgdGhpcy5rZXkpKSByZXR1cm4gbm90RXF1YWwoKVxuICAgICAgaWYgKHR5cGVvZiBub2RlICE9PSAnb2JqZWN0Jykge1xuICAgICAgICByZXR1cm4gbm90RXF1YWwoKVxuICAgICAgfVxuICAgICAgbm9kZSA9IG5vZGVbdGhpcy5rZXldXG4gICAgfVxuXG4gICAgdmFyIHggPSBub2RlXG5cbiAgICB0aGlzLnBvc3QoZnVuY3Rpb24oKSB7XG4gICAgICBub2RlID0geFxuICAgIH0pXG5cbiAgICAvLyBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vICAgY29uc29sZS5sb2coJ3R5cGVzOiAnLCB7eDogdG9TKHgpLCB5OiB0b1MoeSl9KVxuICAgIC8vIH1cblxuICAgIGlmICh0aGlzLmNpcmN1bGFyKSB7XG4gICAgICAvLyBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgLy8gICBjb25zb2xlLmxvZygnY2lyY3VsYXInKVxuICAgICAgLy8gfVxuICAgICAgaWYgKHRyYXZlcnNlKGIpLmdldCh0aGlzLmNpcmN1bGFyLnBhdGgpICE9PSB4KSB7XG4gICAgICAgIG5vdEVxdWFsKClcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIHggIT09IHR5cGVvZiB5KSB7XG4gICAgICAvLyBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgLy8gICBjb25zb2xlLmxvZygnZGlmZiB0eXBlcycpXG4gICAgICAvLyB9XG4gICAgICBpZiAobG9vc2UgPT09IHRydWUgJiYgeCA9PSB5KSB7XG4gICAgICAgIC8vIGlnbm9yZVxuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIG5vdEVxdWFsKClcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAoeCA9PT0gbnVsbCB8fCB5ID09PSBudWxsIHx8IHggPT09IHVuZGVmaW5lZCB8fCB5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmICh4ICE9PSB5KSB7XG4gICAgICAgIG5vdEVxdWFsKClcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAoeC5fX3Byb3RvX18gIT09IHkuX19wcm90b19fKSB7XG4gICAgICBub3RFcXVhbCgpXG4gICAgfVxuICAgIGVsc2UgaWYgKHggPT09IHkpIHtcbiAgICAgIC8vIG5vcFxuICAgIH1cbiAgICBlbHNlIGlmIChpc0Z1bmN0aW9uKHgpKSB7XG4gICAgICBpZiAoaXNSZWdFeHAoeCkpIHtcbiAgICAgICAgLy8gYm90aCByZWdleHBzIG9uIGFjY291bnQgb2YgdGhlIF9fcHJvdG9fXyBjaGVja1xuICAgICAgICBpZiAoeC50b1N0cmluZygpICE9IHkudG9TdHJpbmcoKSkge1xuICAgICAgICAgIG5vdEVxdWFsKClcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZWxzZSBpZiAoeCAhPT0geSkge1xuICAgICAgICBub3RFcXVhbCgpXG4gICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiB4ID09PSAnb2JqZWN0Jykge1xuICAgICAgaWYgKHRvUyh5KSA9PT0gJ1tvYmplY3QgQXJndW1lbnRzXScgfHwgdG9TKHgpID09PSAnW29iamVjdCBBcmd1bWVudHNdJykge1xuICAgICAgICBpZiAodG9TKHgpICE9PSB0b1MoeSkpIHtcbiAgICAgICAgICBub3RFcXVhbCgpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKGlzUmVnRXhwKHgpIHx8IGlzUmVnRXhwKHkpKSB7XG4gICAgICAgIGlmICgheCB8fCAheSB8fCB4LnRvU3RyaW5nKCkgIT09IHkudG9TdHJpbmcoKSkge1xuICAgICAgICAgIG5vdEVxdWFsKClcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZWxzZSBpZiAoaXNEYXRlKHgpIHx8IGlzRGF0ZSh5KSkge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgIShpc0RhdGUoeCkpIHx8XG4gICAgICAgICAgIShpc0RhdGUoeSkpIHx8XG4gICAgICAgICAgeC5nZXRUaW1lKCkgIT09IHkuZ2V0VGltZSgpXG4gICAgICAgICkge1xuICAgICAgICAgIG5vdEVxdWFsKClcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHZhciBreCA9IE9iamVjdEtleXMoeClcbiAgICAgICAgdmFyIGt5ID0gT2JqZWN0S2V5cyh5KS5sZW5ndGhcbiAgICAgICAgaWYgKGt4Lmxlbmd0aCAhPT0ga3kpIHtcbiAgICAgICAgICByZXR1cm4gbm90RXF1YWwoKVxuICAgICAgICB9XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwga3gubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICB2YXIgayA9IGt4W2ldXG4gICAgICAgICAgaWYgKCFoYXNPd25Qcm9wZXJ0eSh5LCBrKSkge1xuICAgICAgICAgICAgbm90RXF1YWwoKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSlcblxuICByZXR1cm4gZXF1YWxcbn1cbiJdLCJuYW1lcyI6WyJjb25zdCJdLCJtYXBwaW5ncyI6IkFBQUFBLEdBQUssQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDLGFBQWEsQ0FBQztBQUN2Q0EsR0FBSyxDQUFDLEdBQUcsR0FBRyxPQUFPLENBQUMsV0FBVyxDQUFDO0FBQ2hDQSxHQUFLLENBQUMsVUFBVSxHQUFHLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQztBQUM1Q0EsR0FBSyxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUMsY0FBYyxDQUFDO0FBQ3hDQSxHQUFLLENBQUMsTUFBTSxHQUFHLE9BQU8sQ0FBQyxZQUFZLENBQUM7QUFDcENBLEdBQUssQ0FBQyxjQUFjLEdBQUcsT0FBTyxDQUFDLHdCQUF3QixDQUFDO0FBQ3hEQSxHQUFLLENBQUMsVUFBVSxHQUFHLE9BQU8sQ0FBQyxjQUFjLENBQUM7Ozs7Ozs7Ozs7QUFVMUMsTUFBTSxDQUFDLE9BQU8sR0FBRyxTQUFT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