/**
 * @since 4.0.0 <- moved out of the store, into scoped
 * @since 1.0.0
 * @desc library of validators to use by name
 *       @modifies this.validators
 * @param  {Object} validators
 */

var is = require('../deps/is')
var isArray = require('../deps/is/array')
var isReal = require('../deps/is/real')
var isFunction = require('../deps/is/function')
var ObjectKeys = require('../deps/util/keys')
var ChainedMap = require('../ChainedMapBase')

var validators = new ChainedMap()

/* prettier-ignore */
var validationKeys = ObjectKeys(is)
for (var i = 0; i < validationKeys.length; i++) {
  var key = validationKeys[i]
  var transformedKey = key.toLowerCase().replace('is', '')
  is[transformedKey] = is[key]
}

validators.from(is)

// @TODO: can use these to return noops with error logging on development
var has = function (key) { return validators.has(key); }
var set = function (key, value) { return validators.set(key, value); }
var get = function (key) { return validators.get(key); }
var merge = function (x) { return validators.merge(x); }

/**
 * @since 4.0.0
 * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/Default_parameters
 * @TODO split into fns
 * @param  {string | Function | Primitive} fullKey
 * @return {Function}
 */
var factory = function (fullKey) {
  // opinionated: if it's a function, it's a validator...
  if (isFunction(fullKey)) {
    return fullKey
  }

  // enum
  if (isArray(fullKey)) {
    var key$1 = 'enum:' + fullKey.join('|')
    if (!has(key$1)) {
      set(key$1, function (x) { return fullKey.includes(x); })
    }
    return get(key$1)
  }

  // eslint-disable-next-line
  var key = fullKey.replace(/[?\[\]!\|]/gm, '')

  // @NOTE if key is number, iterating the array
  if (fullKey.includes('|')) {
    // already have it
    if (has(fullKey)) {
      return get(fullKey)
    }

    // ensure we have all validators
    var validTypes = fullKey.split('|')
    validTypes.map(function (type) { return factory(type); })

    // go through all valid options, if any are true, good to go
    set(fullKey, function (x) {
      for (var v = 0; v < validTypes.length; v++) {
        if (get(validTypes[v])(x)) {
          return true
        }
      }
      return false
    })

    return get(fullKey)
  }

  var fn = get(key)

  if (!has(("?" + key))) {
    set(("?" + key), function (v) { return fn(v) || !isReal(v) || v === ''; })
  }

  if (!has((key + "[]"))) {
    set(
      (key + "[]"),
      function (v) { return fn(v) || (isArray(v) && v.map(function (nested) { return fn(nested); }).includes(true)); }
    )
  }

  if (!has(("!" + key))) {
    set(("!" + key), function (v) { return !get(key[key])(v); })
  }

  return get(fullKey)
}

factory.has = has
factory.get = get
factory.set = set
factory.merge = merge
module.exports = factory

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsaWRhdG9ycy5qcyIsInNvdXJjZXMiOlsidmFsaWRhdG9ycy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBzaW5jZSA0LjAuMCA8LSBtb3ZlZCBvdXQgb2YgdGhlIHN0b3JlLCBpbnRvIHNjb3BlZFxuICogQHNpbmNlIDEuMC4wXG4gKiBAZGVzYyBsaWJyYXJ5IG9mIHZhbGlkYXRvcnMgdG8gdXNlIGJ5IG5hbWVcbiAqICAgICAgIEBtb2RpZmllcyB0aGlzLnZhbGlkYXRvcnNcbiAqIEBwYXJhbSAge09iamVjdH0gdmFsaWRhdG9yc1xuICovXG5cbmNvbnN0IGlzID0gcmVxdWlyZSgnLi4vZGVwcy9pcycpXG5jb25zdCBpc0FycmF5ID0gcmVxdWlyZSgnLi4vZGVwcy9pcy9hcnJheScpXG5jb25zdCBpc1JlYWwgPSByZXF1aXJlKCcuLi9kZXBzL2lzL3JlYWwnKVxuY29uc3QgaXNGdW5jdGlvbiA9IHJlcXVpcmUoJy4uL2RlcHMvaXMvZnVuY3Rpb24nKVxuY29uc3QgT2JqZWN0S2V5cyA9IHJlcXVpcmUoJy4uL2RlcHMvdXRpbC9rZXlzJylcbmNvbnN0IENoYWluZWRNYXAgPSByZXF1aXJlKCcuLi9DaGFpbmVkTWFwQmFzZScpXG5cbmxldCB2YWxpZGF0b3JzID0gbmV3IENoYWluZWRNYXAoKVxuXG4vKiBwcmV0dGllci1pZ25vcmUgKi9cbmNvbnN0IHZhbGlkYXRpb25LZXlzID0gT2JqZWN0S2V5cyhpcylcbmZvciAobGV0IGkgPSAwOyBpIDwgdmFsaWRhdGlvbktleXMubGVuZ3RoOyBpKyspIHtcbiAgY29uc3Qga2V5ID0gdmFsaWRhdGlvbktleXNbaV1cbiAgY29uc3QgdHJhbnNmb3JtZWRLZXkgPSBrZXkudG9Mb3dlckNhc2UoKS5yZXBsYWNlKCdpcycsICcnKVxuICBpc1t0cmFuc2Zvcm1lZEtleV0gPSBpc1trZXldXG59XG5cbnZhbGlkYXRvcnMuZnJvbShpcylcblxuLy8gQFRPRE86IGNhbiB1c2UgdGhlc2UgdG8gcmV0dXJuIG5vb3BzIHdpdGggZXJyb3IgbG9nZ2luZyBvbiBkZXZlbG9wbWVudFxuY29uc3QgaGFzID0ga2V5ID0+IHZhbGlkYXRvcnMuaGFzKGtleSlcbmNvbnN0IHNldCA9IChrZXksIHZhbHVlKSA9PiB2YWxpZGF0b3JzLnNldChrZXksIHZhbHVlKVxuY29uc3QgZ2V0ID0ga2V5ID0+IHZhbGlkYXRvcnMuZ2V0KGtleSlcbmNvbnN0IG1lcmdlID0geCA9PiB2YWxpZGF0b3JzLm1lcmdlKHgpXG5cbi8qKlxuICogQHNpbmNlIDQuMC4wXG4gKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0Z1bmN0aW9ucy9EZWZhdWx0X3BhcmFtZXRlcnNcbiAqIEBUT0RPIHNwbGl0IGludG8gZm5zXG4gKiBAcGFyYW0gIHtzdHJpbmcgfCBGdW5jdGlvbiB8IFByaW1pdGl2ZX0gZnVsbEtleVxuICogQHJldHVybiB7RnVuY3Rpb259XG4gKi9cbmNvbnN0IGZhY3RvcnkgPSBmdWxsS2V5ID0+IHtcbiAgLy8gb3BpbmlvbmF0ZWQ6IGlmIGl0J3MgYSBmdW5jdGlvbiwgaXQncyBhIHZhbGlkYXRvci4uLlxuICBpZiAoaXNGdW5jdGlvbihmdWxsS2V5KSkge1xuICAgIHJldHVybiBmdWxsS2V5XG4gIH1cblxuICAvLyBlbnVtXG4gIGlmIChpc0FycmF5KGZ1bGxLZXkpKSB7XG4gICAgY29uc3Qga2V5ID0gJ2VudW06JyArIGZ1bGxLZXkuam9pbignfCcpXG4gICAgaWYgKCFoYXMoa2V5KSkge1xuICAgICAgc2V0KGtleSwgeCA9PiBmdWxsS2V5LmluY2x1ZGVzKHgpKVxuICAgIH1cbiAgICByZXR1cm4gZ2V0KGtleSlcbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICBjb25zdCBrZXkgPSBmdWxsS2V5LnJlcGxhY2UoL1s/XFxbXFxdIVxcfF0vZ20sICcnKVxuXG4gIC8vIEBOT1RFIGlmIGtleSBpcyBudW1iZXIsIGl0ZXJhdGluZyB0aGUgYXJyYXlcbiAgaWYgKGZ1bGxLZXkuaW5jbHVkZXMoJ3wnKSkge1xuICAgIC8vIGFscmVhZHkgaGF2ZSBpdFxuICAgIGlmIChoYXMoZnVsbEtleSkpIHtcbiAgICAgIHJldHVybiBnZXQoZnVsbEtleSlcbiAgICB9XG5cbiAgICAvLyBlbnN1cmUgd2UgaGF2ZSBhbGwgdmFsaWRhdG9yc1xuICAgIGxldCB2YWxpZFR5cGVzID0gZnVsbEtleS5zcGxpdCgnfCcpXG4gICAgdmFsaWRUeXBlcy5tYXAodHlwZSA9PiBmYWN0b3J5KHR5cGUpKVxuXG4gICAgLy8gZ28gdGhyb3VnaCBhbGwgdmFsaWQgb3B0aW9ucywgaWYgYW55IGFyZSB0cnVlLCBnb29kIHRvIGdvXG4gICAgc2V0KGZ1bGxLZXksIHggPT4ge1xuICAgICAgZm9yIChsZXQgdiA9IDA7IHYgPCB2YWxpZFR5cGVzLmxlbmd0aDsgdisrKSB7XG4gICAgICAgIGlmIChnZXQodmFsaWRUeXBlc1t2XSkoeCkpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9KVxuXG4gICAgcmV0dXJuIGdldChmdWxsS2V5KVxuICB9XG5cbiAgbGV0IGZuID0gZ2V0KGtleSlcblxuICBpZiAoIWhhcyhgPyR7a2V5fWApKSB7XG4gICAgc2V0KGA/JHtrZXl9YCwgdiA9PiBmbih2KSB8fCAhaXNSZWFsKHYpIHx8IHYgPT09ICcnKVxuICB9XG5cbiAgaWYgKCFoYXMoYCR7a2V5fVtdYCkpIHtcbiAgICBzZXQoXG4gICAgICBgJHtrZXl9W11gLFxuICAgICAgdiA9PiBmbih2KSB8fCAoaXNBcnJheSh2KSAmJiB2Lm1hcChuZXN0ZWQgPT4gZm4obmVzdGVkKSkuaW5jbHVkZXModHJ1ZSkpXG4gICAgKVxuICB9XG5cbiAgaWYgKCFoYXMoYCEke2tleX1gKSkge1xuICAgIHNldChgISR7a2V5fWAsIHYgPT4gIWdldChrZXlba2V5XSkodikpXG4gIH1cblxuICByZXR1cm4gZ2V0KGZ1bGxLZXkpXG59XG5cbmZhY3RvcnkuaGFzID0gaGFzXG5mYWN0b3J5LmdldCA9IGdldFxuZmFjdG9yeS5zZXQgPSBzZXRcbmZhY3RvcnkubWVyZ2UgPSBtZXJnZVxubW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5XG4iXSwibmFtZXMiOlsiY29uc3QiLCJsZXQiLCJrZXkiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7OztBQVFBQSxHQUFLLENBQUMsRUFBRSxHQUFHLE9BQU8sQ0FBQyxZQUFZLENBQUM7QUFDaENBLEdBQUssQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDLGtCQUFrQixDQUFDO0FBQzNDQSxHQUFLLENBQUMsTUFBTSxHQUFHLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQztBQUN6Q0EsR0FBSyxDQUFDLFVBQVUsR0FBRyxPQUFPLENBQUMscUJBQXFCLENBQUM7QUFDakRBLEdBQUssQ0FBQyxVQUFVLEdBQUcsT0FBTyxDQUFDLG1CQUFtQixDQUFDO0FBQy9DQSxHQUFLLENBQUMsVUFBVSxHQUFHLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQzs7QUFFL0NDLEdBQUcsQ0FBQyxVQUFVLEdBQUcsSUFBSSxVQUFVLEVBQUU7OztBQUdqQ0QsR0FBSyxDQUFDLGNBQWMsR0FBRyxVQUFVLENBQUMsRUFBRSxDQUFDO0FBQ3JDLEtBQUtDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxjQUFjLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO0VBQzlDRCxHQUFLLENBQUMsR0FBRyxHQUFHLGNBQWMsQ0FBQyxDQUFDLENBQUM7RUFDN0JBLEdBQUssQ0FBQyxjQUFjLEdBQUcsR0FBRyxDQUFDLFdBQVcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDO0VBQzFELEVBQUUsQ0FBQyxjQUFjLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDO0NBQzdCOztBQUVELFVBQVUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDOzs7QUFHbkJBLEdBQUssQ0FBQyxHQUFHLEdBQUcsVUFBQSxHQUFHLENB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