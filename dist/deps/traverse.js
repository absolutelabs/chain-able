/* eslint no-new-wrappers: "off" */
/* eslint eqeqeq: "off" */
/* eslint func-style: "off" */
var isPureObj = require('./is/pureObj')
var isRegExp = require('./is/regexp')
var isError = require('./is/error')
var isBoolean = require('./is/boolean')
var isNumber = require('./is/number')
var isString = require('./is/string')
var isDate = require('./is/date')
// was inline for size?
var isArray = require('./is/array')
var hasOwnProperty = require('./util/hasOwnProperty')
var objectKeys = require('./util/keys')
var argumentor = require('./argumentor')

/**
 * @param {Array | Object | any} xs
 * @param {Function} fn
 * @TODO: unexpectedly breaks things iterating
 * if you are relying on internal functionality
 * (such as .path, .get, .value...) with map & set
 *
 * @desc if there is .forEach on the obj already, use it
 * otherwise, call function for each
 */
var forEach = function(xs, fn) {
  if (xs.forEach) { xs.forEach(fn) }
  else { for (var i = 0; i < xs.length; i++) { fn(xs[i], i, xs) } }
}

var traverse = function(obj) {
  return new Traverse(obj)
}
module.exports = traverse

/**
 * @TODO: symbol, map, set
 * @tutorial https://github.com/substack/js-traverse
 * @classdesc Traverse.js
 * @param {Travcersable} obj
 * @constructor
 */
function Traverse(obj) {
  this.value = obj
}

/**
 * @see this.forEach
 * @todo hasOwnProperty
 * @param  {Array<string>} ps paths
 * @return {any} value at dot-prop
 */
Traverse.prototype.get = function(ps) {
  var node = this.value
  for (var i = 0; i < ps.length; i++) {
    var key = ps[i]
    if (!node || !hasOwnProperty(node, key)) {
      node = undefined
      break
    }
    node = node[key]
  }
  return node
}

/**
 * @see hasOwnProperty
 * @param  {Array<string>} ps paths
 * @return {boolean}
 */
Traverse.prototype.has = function(ps) {
  var node = this.value
  for (var i = 0; i < ps.length; i++) {
    var key = ps[i]
    if (!node || !hasOwnProperty(node, key)) {
      return false
    }
    node = node[key]
  }
  return true
}

Traverse.prototype.set = function(ps, value) {
  var node = this.value
  var i = 0
  for (; i < ps.length - 1; i++) {
    var key = ps[i]
    if (!hasOwnProperty(node, key)) { node[key] = {} }
    node = node[key]
  }
  node[ps[i]] = value
  return value
}

/**
 * @see walk
 * @param  {Function} cb
 * @return {any}
 */
Traverse.prototype.map = function(cb) {
  return walk(this.value, cb, true)
}

/**
 * @param  {Function} cb
 * @return {any} this.value
 */
Traverse.prototype.forEach = function(cb) {
  this.value = walk(this.value, cb, false)
  return this.value
}

/**
 * @since 4.0.0
 * @param  {Function} cb
 * @return {any} this.value
 */
Traverse.prototype.forEachs = function(cb) {
  return this.forEach(function(x) {
    cb.call(this, this, x)
  })
}

Traverse.prototype.reduce = function(cb, init) {
  var skip = arguments.length === 1
  var acc = skip ? this.value : init
  this.forEach(function(x) {
    if (!this.isRoot || !skip) {
      acc = cb.call(this, acc, x)
    }
  })
  return acc
}

Traverse.prototype.paths = function() {
  var acc = []
  this.forEach(function(x) {
    acc.push(this.path)
  })
  return acc
}

Traverse.prototype.nodes = function() {
  var acc = []
  this.forEach(function(x) {
    acc.push(this.node)
  })
  return acc
}

Traverse.prototype.clone = function() {
  var parents = []
  var nodes = []

  return (function clone(src) {
    for (var i = 0; i < parents.length; i++) {
      if (parents[i] === src) {
        return nodes[i]
      }
    }

    if (isPureObj(src)) {
      var dst = copy(src)

      parents.push(src)
      nodes.push(dst)

      forEach(objectKeys(src), function (key) {
        dst[key] = clone(src[key])
      })

      parents.pop()
      nodes.pop()
      return dst
    }
    else {
      return src
    }
  })(this.value)
}

function walk(root, cb, immutable) {
  var path = []
  var parents = []
  var alive = true

  return (function walker(node_) {
    // both are objs with properties that get changed but
    var node = immutable ? copy(node_) : node_
    var modifiers = {}
    var keepGoing = true

    var state = {
      node: node,
      node_: node_,
      path: [].concat(path),
      parent: parents[parents.length - 1],
      parents: parents,
      key: path.slice(-1)[0],
      isRoot: path.length === 0,
      level: path.length,
      circular: null,
      update: function update(x, stopHere) {
        if (!state.isRoot) {
          state.parent.node[state.key] = x
        }
        state.node = x
        if (stopHere) { keepGoing = false }
      },
      delete: function delete$1(stopHere) {
        delete state.parent.node[state.key]
        if (stopHere) { keepGoing = false }
      },
      remove: function remove(stopHere) {
        // @NOTE safety
        if (state.parent === undefined) {
          return
        }
        else if (isArray(state.parent.node)) {
          state.parent.node.splice(state.key, 1)
        }
        else {
          delete state.parent.node[state.key]
        }
        if (stopHere) { keepGoing = false }
      },
      keys: null,
      before: function before(f) {
        modifiers.before = f
      },
      after: function after(f) {
        modifiers.after = f
      },
      pre: function pre(f) {
        modifiers.pre = f
      },
      post: function post(f) {
        modifiers.post = f
      },
      stop: function stop() {
        alive = false
      },
      block: function block() {
        keepGoing = false
      },
    }

    if (!alive) { return state }

    function updateState() {
      if (isPureObj(state.node)) {
        if (!state.keys || state.node_ !== state.node) {
          state.keys = objectKeys(state.node)
        }

        state.isLeaf = state.keys.length == 0

        for (var i = 0; i < parents.length; i++) {
          if (parents[i].node_ === node_) {
            state.circular = parents[i]
            break
          }
        }
      }
      else {
        state.isLeaf = true
        state.keys = null
      }

      state.notLeaf = !state.isLeaf
      state.notRoot = !state.isRoot
    }

    updateState()

    // @NOTE added last `,state` arg to not have it have to use `this`,
    // but broke some things so moved to another fn
    //
    // use return values to update if defined
    var ret = cb.call(state, state.node)
    if (ret !== undefined && state.update) { state.update(ret) }

    if (modifiers.before) { modifiers.before.call(state, state.node) }

    if (!keepGoing) { return state }

    // when it's some sort of itertable object, loop it further
    if (isPureObj(state.node) && !state.circular) {
      parents.push(state)

      updateState()

      forEach(state.keys, function (key, i) {
        path.push(key)

        if (modifiers.pre) { modifiers.pre.call(state, state.node[key], key) }

        var child = walker(state.node[key])
        if (immutable && hasOwnProperty(state.node, key)) {
          state.node[key] = child.node
        }

        child.isLast = i == state.keys.length - 1
        child.isFirst = i == 0

        if (modifiers.post) { modifiers.post.call(state, child) }

        path.pop()
      })
      parents.pop()
    }

    if (modifiers.after) { modifiers.after.call(state, state.node) }

    return state
  })(root).node
}

function copy(src) {
  // require('fliplog').data(src).bold('copying').echo()
  if (isPureObj(src)) {
    var dst

    // const reduce = require('./reduce')
    // const toarr = require('./to-arr')
    // require('fliplog').underline('is obj').echo()
    // @TODO:
    // if (isMap(src)) {
    //   require('fliplog').underline('is map').echo()
    //   dst = reduce(src.entries())
    // }
    // else if (isSet(src)) {
    //   dst = toarr(src)
    // }
    if (isArray(src)) {
      dst = []
    }
    else if (isDate(src)) {
      dst = new Date(src.getTime ? src.getTime() : src)
    }
    else if (isRegExp(src)) {
      dst = new RegExp(src)
    }
    else if (isError(src)) {
      dst = {message: src.message}
    }
    else if (isBoolean(src)) {
      dst = new Boolean(src)
    }
    else if (isNumber(src)) {
      dst = new Number(src)
    }
    else if (isString(src)) {
      dst = new String(src)
    }
    else {
      //if (Object.create && Object.getPrototypeOf)
      dst = Object.create(Object.getPrototypeOf(src))
    }
    // else if (src.constructor === Object) {
    //   dst = {}
    // }
    // else {
    //   // @NOTE: only happens if above getPrototypeOf does not exist
    //   var proto = (src.constructor && src.constructor.prototype) ||
    //   src.__proto__ || {}
    //   var T = function() {}
    //   T.prototype = proto
    //   dst = new T()
    // }

    forEach(objectKeys(src), function (key) {
      dst[key] = src[key]
    })
    return dst
  }
  else {
    // require('fliplog').red('is NOT OBJ').echo()
    return src
  }
}

forEach(objectKeys(Traverse.prototype), function (key) {
  traverse[key] = function(obj) {
    // var args = [].slice.call(arguments, 1)
    var args = argumentor.apply(null, arguments).slice(1)

    var t = new Traverse(obj)
    return t[key].apply(t, args)
  }
})

//# sourceMappingURL=data:application/json;charset=utf-8;base64,