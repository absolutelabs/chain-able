// https://github.com/sindresorhus/matcher/blob/master/index.js
var toarr = require('./to-arr')
var toRegExp = require('./to-regexp')
var isMatcher = require('./is/matcher')
var ObjectAssign = require('./util/assign')
var cache = require('./cache')

var m = {}

/**
 * @since 3.0.0
 * @param  {Array<string> | string | Function | RegExp} pattern
 * @param  {boolean | undefined} shouldNegate
 * @param  {boolean | undefined} alphaOmega
 * @return {Array<string> | string | Function | RegExp} matchable
 */
m.make = function (pattern, shouldNegate, alphaOmega) {
  if (cache.has(pattern)) { return cache.get(pattern) }

  var matchable = pattern
  if (isMatcher(matchable) && !matchable.test) { matchable.test = matchable }
  if (isMatcher(matchable)) { return matchable }

  var negated = matchable[0] === '!'
  if (negated) { matchable = matchable.slice(1) }
  matchable = toRegExp(matchable)

  if (negated && shouldNegate) { matchable = "(?!" + matchable + ")" }
  if (alphaOmega) { matchable = "^" + matchable + "$" }

  matchable = new RegExp(("" + matchable), 'i')
  matchable.negated = negated

  cache.set(pattern, matchable)
  return matchable
}

/**
 * @since 3.0.0
 * @param  {Array<string> | string} inputs
 * @param  {Array<string> | string | Function | RegExp} patterns
 * @param  {boolean | undefined} shouldNegate
 * @param  {boolean | undefined} alphaOmega
 * @return {Array<any>}
 */
m.matcher = function (inputs, patterns, shouldNegate, alphaOmega) {
  patterns = toarr(patterns).map(function (p) { return m.make(p, shouldNegate, alphaOmega); })
  inputs = toarr(inputs)

  var firstNegated = patterns[0].negated
  var matchesToReturn = []

  for (var i = 0; i < inputs.length; i++) {
    var input = inputs[i]
    // If first pattern is negated we include everything to match user expectation
    var matches = firstNegated
    for (var j = 0; j < patterns.length; j++) {
      if (patterns[j].test(input)) {
        matches = !patterns[j].negated
      }
    }

    if (matches) { matchesToReturn.push(input) }
  }

  return matchesToReturn
}

module.exports = ObjectAssign(m.matcher, m)

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF0Y2hlci5qcyIsInNvdXJjZXMiOlsibWF0Y2hlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBodHRwczovL2dpdGh1Yi5jb20vc2luZHJlc29yaHVzL21hdGNoZXIvYmxvYi9tYXN0ZXIvaW5kZXguanNcbmNvbnN0IHRvYXJyID0gcmVxdWlyZSgnLi90by1hcnInKVxuY29uc3QgdG9SZWdFeHAgPSByZXF1aXJlKCcuL3RvLXJlZ2V4cCcpXG5jb25zdCBpc01hdGNoZXIgPSByZXF1aXJlKCcuL2lzL21hdGNoZXInKVxuY29uc3QgT2JqZWN0QXNzaWduID0gcmVxdWlyZSgnLi91dGlsL2Fzc2lnbicpXG5jb25zdCBjYWNoZSA9IHJlcXVpcmUoJy4vY2FjaGUnKVxuXG5jb25zdCBtID0ge31cblxuLyoqXG4gKiBAc2luY2UgMy4wLjBcbiAqIEBwYXJhbSAge0FycmF5PHN0cmluZz4gfCBzdHJpbmcgfCBGdW5jdGlvbiB8IFJlZ0V4cH0gcGF0dGVyblxuICogQHBhcmFtICB7Ym9vbGVhbiB8IHVuZGVmaW5lZH0gc2hvdWxkTmVnYXRlXG4gKiBAcGFyYW0gIHtib29sZWFuIHwgdW5kZWZpbmVkfSBhbHBoYU9tZWdhXG4gKiBAcmV0dXJuIHtBcnJheTxzdHJpbmc+IHwgc3RyaW5nIHwgRnVuY3Rpb24gfCBSZWdFeHB9IG1hdGNoYWJsZVxuICovXG5tLm1ha2UgPSAocGF0dGVybiwgc2hvdWxkTmVnYXRlLCBhbHBoYU9tZWdhKSA9PiB7XG4gIGlmIChjYWNoZS5oYXMocGF0dGVybikpIHJldHVybiBjYWNoZS5nZXQocGF0dGVybilcblxuICBsZXQgbWF0Y2hhYmxlID0gcGF0dGVyblxuICBpZiAoaXNNYXRjaGVyKG1hdGNoYWJsZSkgJiYgIW1hdGNoYWJsZS50ZXN0KSBtYXRjaGFibGUudGVzdCA9IG1hdGNoYWJsZVxuICBpZiAoaXNNYXRjaGVyKG1hdGNoYWJsZSkpIHJldHVybiBtYXRjaGFibGVcblxuICBsZXQgbmVnYXRlZCA9IG1hdGNoYWJsZVswXSA9PT0gJyEnXG4gIGlmIChuZWdhdGVkKSBtYXRjaGFibGUgPSBtYXRjaGFibGUuc2xpY2UoMSlcbiAgbWF0Y2hhYmxlID0gdG9SZWdFeHAobWF0Y2hhYmxlKVxuXG4gIGlmIChuZWdhdGVkICYmIHNob3VsZE5lZ2F0ZSkgbWF0Y2hhYmxlID0gYCg/ISR7bWF0Y2hhYmxlfSlgXG4gIGlmIChhbHBoYU9tZWdhKSBtYXRjaGFibGUgPSBgXiR7bWF0Y2hhYmxlfSRgXG5cbiAgbWF0Y2hhYmxlID0gbmV3IFJlZ0V4cChgJHttYXRjaGFibGV9YCwgJ2knKVxuICBtYXRjaGFibGUubmVnYXRlZCA9IG5lZ2F0ZWRcblxuICBjYWNoZS5zZXQocGF0dGVybiwgbWF0Y2hhYmxlKVxuICByZXR1cm4gbWF0Y2hhYmxlXG59XG5cbi8qKlxuICogQHNpbmNlIDMuMC4wXG4gKiBAcGFyYW0gIHtBcnJheTxzdHJpbmc+IHwgc3RyaW5nfSBpbnB1dHNcbiAqIEBwYXJhbSAge0FycmF5PHN0cmluZz4gfCBzdHJpbmcgfCBGdW5jdGlvbiB8IFJlZ0V4cH0gcGF0dGVybnNcbiAqIEBwYXJhbSAge2Jvb2xlYW4gfCB1bmRlZmluZWR9IHNob3VsZE5lZ2F0ZVxuICogQHBhcmFtICB7Ym9vbGVhbiB8IHVuZGVmaW5lZH0gYWxwaGFPbWVnYVxuICogQHJldHVybiB7QXJyYXk8YW55Pn1cbiAqL1xubS5tYXRjaGVyID0gKGlucHV0cywgcGF0dGVybnMsIHNob3VsZE5lZ2F0ZSwgYWxwaGFPbWVnYSkgPT4ge1xuICBwYXR0ZXJucyA9IHRvYXJyKHBhdHRlcm5zKS5tYXAocCA9PiBtLm1ha2UocCwgc2hvdWxkTmVnYXRlLCBhbHBoYU9tZWdhKSlcbiAgaW5wdXRzID0gdG9hcnIoaW5wdXRzKVxuXG4gIGNvbnN0IGZpcnN0TmVnYXRlZCA9IHBhdHRlcm5zWzBdLm5lZ2F0ZWRcbiAgY29uc3QgbWF0Y2hlc1RvUmV0dXJuID0gW11cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGlucHV0cy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGlucHV0ID0gaW5wdXRzW2ldXG4gICAgLy8gSWYgZmlyc3QgcGF0dGVybiBpcyBuZWdhdGVkIHdlIGluY2x1ZGUgZXZlcnl0aGluZyB0byBtYXRjaCB1c2VyIGV4cGVjdGF0aW9uXG4gICAgbGV0IG1hdGNoZXMgPSBmaXJzdE5lZ2F0ZWRcbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IHBhdHRlcm5zLmxlbmd0aDsgaisrKSB7XG4gICAgICBpZiAocGF0dGVybnNbal0udGVzdChpbnB1dCkpIHtcbiAgICAgICAgbWF0Y2hlcyA9ICFwYXR0ZXJuc1tqXS5uZWdhdGVkXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG1hdGNoZXMpIG1hdGNoZXNUb1JldHVybi5wdXNoKGlucHV0KVxuICB9XG5cbiAgcmV0dXJuIG1hdGNoZXNUb1JldHVyblxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdEFzc2lnbihtLm1hdGNoZXIsIG0pXG4iXSwibmFtZXMiOlsiY29uc3QiLCJsZXQiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0FBLEdBQUssQ0FBQyxLQUFLLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQztBQUNqQ0EsR0FBSyxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUMsYUFBYSxDQUFDO0FBQ3ZDQSxHQUFLLENBQUMsU0FBUyxHQUFHLE9BQU8sQ0FBQyxjQUFjLENBQUM7QUFDekNBLEdBQUssQ0FBQyxZQUFZLEdBQUcsT0FBTyxDQUFDLGVBQWUsQ0FBQztBQUM3Q0EsR0FBSyxDQUFDLEtBQUssR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDOztBQUVoQ0EsR0FBSyxDQUFDLENBQUMsR0FBRyxFQUFFOzs7Ozs7Ozs7QUFTWixDQUFDLENBQUMsSUFBSSxHQUFHLFNBQUEsQ0FBQyxPQUFPLEVBQUUsWUFBWSxFQUFFLFVBQVUsRUFBRSxBQUFHO0VBQzlDLElBQUksS0FBSyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsRUFBRSxFQUFBLE9BQU8sS0FBSyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsRUFBQTs7RUFFakRDLEdBQUcsQ0FBQyxT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